@using Syncfusion.EJ2
@inject AppointmentService service

@{
    List<TextValueData> bloodGroupData = service.BloodGroups;
    DateTime datepickerValue = new DateTime(1996, 1, 31);
}

<div class="new-patient-container" style="display:none">
  <ejs-dialog id="newPatientObj" width="390px" cssClass="new-patient-dialog" isModal="true" visible="false"
    header="New Patient" showCloseIcon="true" target="body" beforeOpen="onPatientDialogBeforeOpen" footerTemplate="<div class='button-container'>
    <button id='cancel'>Cancel</button><button id='save'>Save</button></div>">
    <e-dialog-animationsettings effect="None"></e-dialog-animationsettings>
    <e-content-template>
      <form id="new-patient-form">
        <div class="field-container name-container">
          <ejs-textbox id="PatientName" name="Name" cssClass="patient-name e-field" placeholder="Patient Name"
            floatLabelType="Always"></ejs-textbox>
        </div>
        <div class="field-container gender-container">
          <div class="gender">
            <div><label>Gender</label></div>
            <div class="e-btn-group e-round-corner e-field">
              <input type="radio" id="doctorCheckMale" name="Gender" value="Male" checked />
              <label class="e-btn" for="doctorCheckMale">Male</label>
              <input type="radio" id="doctorCheckFemale" name="Gender" value="Female" />
              <label class="e-btn" for="doctorCheckFemale">Female</label>
            </div>
          </div>
          <div class="dob">
            <ejs-datepicker id="DOB" cssClass="e-field" placeholder="DOB" value="@datepickerValue" floatLabelType="Always"
              showClearButton="false"></ejs-datepicker>
          </div>
        </div>
        <div class="field-container contact-container">
          <div class="blood-group">
            <ejs-dropdownlist id="BloodGroup" width="125px" cssClass="e-field" placeholder="Blood Group" index=0
              floatLabelType="Always" dataSource="@bloodGroupData">
              <e-dropdownlist-fields text="Text" value="Value"></e-dropdownlist-fields>
            </ejs-dropdownlist>
          </div>
          <div class="mobile">
            <ejs-maskedtextbox id="PatientMobile" name="Mobile" cssClass="e-field" width="180px" placeholder="Mobile Number"
              mask="(999) 999-9999" floatLabelType="Always">
            </ejs-maskedtextbox>
          </div>
        </div>
        <div class="field-container email-container">
          <ejs-textbox cssClass="e-field" id="PatientEmail" name="Email" placeholder="Email" floatLabelType="Always">
          </ejs-textbox>
        </div>
        <div class="field-container symptom-container">
          <ejs-textbox cssClass="e-field" id="Symptoms" name="Symptoms" placeholder="Symptoms" floatLabelType="Always">
          </ejs-textbox>
        </div>
      </form>
    </e-content-template>
  </ejs-dialog>
</div>

<script type="text/javascript">
    var activePatientData;
    function onAddPatient() {
        if (document.querySelector("#newPatientObj")) {
            var dialogObj = document.querySelector("#newPatientObj").ej2_instances[0];
            dialogObj.header = 'New Patient';
            dialogObj.show();
        }
    }
    function onPatientDialogBeforeOpen(args) {
        var cancelBtn = args.element.querySelector('#cancel');
        var saveBtn = args.element.querySelector('#save');
        if (cancelBtn) {
            var btnObj = new ej.buttons.Button({
                cssClass: 'e-normal'
            });
            btnObj.appendTo(cancelBtn);
            cancelBtn.onclick = function (e) { onPatientCancelClick(e); };
        }
        if (saveBtn) {
            var btnObj = new ej.buttons.Button({
                cssClass: 'e-normal',
                isPrimary: true
            });
            btnObj.appendTo(saveBtn);
            saveBtn.onclick = function (e) { onPatientSaveClick(e); };
        }

        var formElement = args.element.querySelector('#new-patient-form');
        if (formElement && formElement.ej2_instances) {
            return;
        }
        var customFn = (e) => {
            var argsLength = e.element.ej2_instances[0].value.length;
            return (argsLength !== 0) ? argsLength >= 10 : false;
        };
        var rules = {};
        rules.Name = { required: [true, 'Enter valid name'] };
        rules.DOB = { required: true, date: [true, 'Select valid DOB'] };
        rules.Mobile = { required: [customFn, 'Enter valid mobile number'] };
        rules.Email = { required: [true, 'Enter valid email'], email: [true, 'Email address is invalid'] };
        renderFormValidator(formElement, rules, document.querySelector("#newPatientObj").ej2_instances[0].element);
    }

    function onPatientSaveClick(e) {
        var formElementContainer = document.querySelector('.new-patient-dialog #new-patient-form');
        if (formElementContainer && formElementContainer.classList.contains('e-formvalidator') &&
            !formElementContainer.ej2_instances[0].validate()) {
            return;
        }
        var dialogObj = document.querySelector("#newPatientObj").ej2_instances[0];
        var obj = dialogObj.header == 'New Patient' ? {} : activePatientData;
        var formElement = [].slice.call(document.querySelectorAll('.new-patient-dialog .e-field'));
        for (var curElement of formElement) {
            var columnName = curElement.querySelector('input').name;
            var isDropElement = curElement.classList.contains('e-ddl');
            var isDatePickElement = curElement.classList.contains('e-date-wrapper');
            if (!ej.base.isNullOrUndefined(columnName) || isDropElement || isDatePickElement) {
                if (columnName === '' && isDropElement) {
                    columnName = curElement.querySelector('select').name;
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    obj[columnName] = instance.value;
                } else if (columnName === 'DOB' && isDatePickElement) {
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    obj[columnName] = instance.value;
                } else if (columnName === 'Gender') {
                    obj[columnName] = curElement.querySelector('input').checked ? 'Male' : 'Female';
                } else {
                    obj[columnName] = curElement.querySelector('input').value;
                }
            }
        }
        var ajaxHTML = new ej.base.Ajax('Home/UpdatePatientData', 'POST', true);
        ajaxHTML.send(JSON.stringify(obj)).then(function (value) {
            var gridele = document.querySelector('#patientsGrid')
            var comboBoxEle = document.querySelector('.e-schedule-dialog #PatientName')
            var currentRenderedPage = getCurrentPage();
            if (currentRenderedPage === 'patients' && gridele && gridele.ej2_instances[0]) {
                var gridObj = document.querySelector('#patientsGrid').ej2_instances[0];
                if (dialogObj.header == 'New Patient') {
                    obj.Id = Math.max.apply(Math, gridObj.dataSource.map(data => data.Id)) + 1;
                    gridObj.addRecord(obj, gridObj.dataSource.length);
                }
                else {
                    var index = gridObj.dataSource.findIndex(x => x.Id == activePatientData.Id);
                    gridObj.dataSource[index] = obj;
                    gridObj.refresh();
                }
            }
            else if (currentRenderedPage === 'calendar' && comboBoxEle && comboBoxEle.ej2_instances[0]) {
                obj = JSON.parse(value);
                var dataSource = comboBoxEle.ej2_instances[0].dataSource;
                comboBoxEle.ej2_instances[0].dataSource = [];
                dataSource.push(obj);
                comboBoxEle.ej2_instances[0].dataSource = dataSource;
            }
        });
        resetPatientFormFields();
        dialogObj = document.querySelector("#newPatientObj").ej2_instances[0];
        dialogObj.hide();
    }

    function onPatientCancelClick(e) {
        resetPatientFormFields();
        if (document.querySelector("#newPatientObj")) {
            var dialogObj = document.querySelector("#newPatientObj").ej2_instances[0];
            dialogObj.hide();
        }
    }
    function resetPatientFormFields() {
        var formElement = [].slice.call(document.querySelectorAll('.new-patient-dialog .e-field'));
        destroyErrorElement(document.querySelector('#new-patient-form'), formElement);
        for (var curElement of formElement) {
            var columnName = curElement.querySelector('input').name;
            var isDropElement = curElement.classList.contains('e-ddl');
            var isDatePickElement = curElement.classList.contains('e-date-wrapper');
            if (!ej.base.isNullOrUndefined(columnName) || isDropElement || isDatePickElement) {
                if (columnName === '' && isDropElement) {
                    columnName = curElement.querySelector('select').name;
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    instance.value = instance.dataSource[0];
                } else if (columnName === 'DOB' && isDatePickElement) {
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    instance.value = new Date();
                    curElement.querySelectorAll('input')[0].checked = true;
                } else if (columnName === 'Gender') {
                    curElement.querySelectorAll('input')[0].checked = true;
                } else if (columnName === 'Mobile') {
                    curElement.querySelector('input').value = '';
                } else {
                    curElement.querySelector('input').value = '';
                }
            }
        }
    }
    function showPatientDetails(activeData) {
        var dialogObj = document.querySelector("#newPatientObj").ej2_instances[0];
        dialogObj.header = 'Edit Patient';
        dialogObj.show();
        var obj = activeData;
        activePatientData = activeData;
        var formElement = [].slice.call(document.querySelectorAll('.new-patient-dialog .e-field'));
        for (var curElement of formElement) {
            var columnName = curElement.querySelector('input').name;
            var isCustomElement = curElement.classList.contains('e-ddl');
            var isDatePickElement = curElement.classList.contains('e-date-wrapper');
            if (!ej.base.isNullOrUndefined(columnName) || isCustomElement || isDatePickElement) {
                if (columnName === '' && isCustomElement) {
                    columnName = curElement.querySelector('select').name;
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    instance.value = obj[columnName];
                    instance.dataBind();
                } else if (columnName === 'DOB' && isDatePickElement) {
                    var instance = curElement.querySelector('input').ej2_instances[0];
                    instance.value = obj[columnName] || null;
                } else if (columnName === 'Gender') {
                    if (obj[columnName] === 'Male') {
                        curElement.querySelectorAll('input')[0].checked = true;
                    } else {
                        curElement.querySelectorAll('input')[1].checked = true;
                    }
                } else if (columnName === 'Mobile') {
                    curElement.querySelector('input').ej2_instances[0].value =
                        obj[columnName].replace(/[ -.*+?^${}()|[\]\\]/g, '');
                } else {
                    curElement.querySelector('input').value = obj[columnName];
                }
            }
        }
    }
</script>

<style>
.new-patient-dialog {
	max-height: 98% !important;
}

.new-patient-dialog .e-dlg-content #new-patient-form .field-container {
	padding-bottom: 16px;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container,
.new-patient-dialog .e-dlg-content #new-patient-form .contact-container {
	display: flex;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender,
.new-patient-dialog .e-dlg-content #new-patient-form .contact-container .gender {
	padding-right: 8px;
	flex: 1;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender .e-btn-group input:checked+label.e-btn,
.new-patient-dialog .e-dlg-content #new-patient-form .contact-container .gender .e-btn-group input:checked+label.e-btn {
	background-color: #e6e6e6;
	border-color: #adadad;
	box-shadow: inset 0 3px 5px #000 20;
	color: #333;
	outline: 0 solid #fff;
	outline-offset: 0;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .mobile,
.new-patient-dialog .e-dlg-content #new-patient-form .contact-container .mobile {
	padding-left: 8px;
	flex: 1;
}

.new-patient-dialog .e-dlg-content #new-patient-form .contact-container .blood-group,
.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .dob {
	padding-left: 8px;
	flex: 1;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender {
	display: flex;
	flex-direction: column;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender label:not(.e-btn) {
	font-weight: bold;
	color: #333;
	font-size: 12px;
	font-family: "Helvetica Neue", "Helvetica", "Arial", sans-serif, "-apple-system", "BlinkMacSystemFont";
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender .e-btn-group {
	height: 32px;
	margin-top: 8px;
}

.new-patient-dialog .e-dlg-content #new-patient-form .gender-container .gender .e-btn-group label {
	width: 50%;
}
</style>
